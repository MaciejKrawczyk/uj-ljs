import json
from random import randint

import ollama

from functions import do_nothing, get_order_status, place_order, print_menu, get_opening_hours

orders = []


class Config:
    def __init__(self, output_format="json", model="llama3.1"):
        self.format = output_format
        self.model = model


class Chat:
    def __init__(self, system_prompt: str, config: Config):
        self.system_prompt = system_prompt
        self.config = config

    def get_json_response(self, user_prompt: str):
        response = ollama.chat(
            model=self.config.model,
            stream=False,
            messages=[
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            format=self.config.format,
        )
        json_output = json.loads(response['message']['content'])
        return json_output

    def get_response(self, user_prompt: str):
        response = ollama.chat(
            model=self.config.model,
            stream=False,
            messages=[
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": user_prompt}
            ],
        )
        output = json.loads(response['message']['content'])
        return output


class OpeningHourChat:
    def __init__(self, system_prompt: str):
        self.system_prompt = system_prompt


class PlaceOrderChat:
    def __init__(self, system_prompt: str):
        self.system_prompt = system_prompt


class GetMenuChat:
    def __init__(self, system_prompt: str):
        self.system_prompt = system_prompt


class GetOrderStatusChat:
    def __init__(self, system_prompt: str):
        self.system_prompt = system_prompt


class NormalConversationChat:
    def __init__(self, system_prompt: str):
        self.system_prompt = system_prompt


def get_chatbot(user_prompt: str):
    pass


def determine_function_to_call(user_input: str):
    pass


class RestaurantChat:
    def __init__(self):
        pass


class OrderedDish:
    def __init__(self, dish_id: int, special_instruction: str):
        self.dish_id = dish_id
        self.special_instruction = special_instruction

    def get_dish(self):
        return {"id": self.dish_id, "special_instruction": self.special_instruction}

    def get_dish_str(self):
        return json.dumps(self.get_dish())


class RestaurantOrder:
    def __init__(self, ordered_dishes: list[OrderedDish]):
        self.ordered_dishes = ordered_dishes
        self.order_id = randint(1, 1000)


class Order:
    def __init__(self, dish_ids: list[int], menu: list[dict]):
        self.order_id = randint(1, 1000)
        self.dish_ids = dish_ids
        self.menu = menu


CHATBOT_SYSTEM_PROMPT = """
Jeste≈õ pomocnym asystentem restauracji. Udzielasz informacji o restauracji, pomagasz w sk≈Çadaniu zam√≥wie≈Ñ oraz odpowiadasz na powiƒÖzane pytania.

Twoje odpowiedzi muszƒÖ mieƒá nastƒôpujƒÖcy format JSON: 
{ "function": "<funkcja do wywo≈Çania>" }

### Funkcje do wywo≈Çania:
- **get_opening_hours**: Zwraca godziny otwarcia restauracji.
- **get_menu**: Zwraca menu restauracji.
- **place_order**: Rozpoczyna proces sk≈Çadania zam√≥wienia w restauracji.
- **get_order_status**: Zwraca status zam√≥wienia. Mo≈ºe byƒá konieczne poproszenie u≈ºytkownika o numer zam√≥wienia lub inne szczeg√≥≈Çy identyfikacyjne.
- **do_nothing**: U≈ºywaj tej funkcji, gdy ≈ºadne z powy≈ºszych nie pasuje. W takim przypadku stw√≥rz pomocnƒÖ odpowied≈∫ dla u≈ºytkownika w jƒôzyku naturalnym PO POLSKU!.

### Wytyczne:
1. **Pytania uzupe≈ÇniajƒÖce**: 
   - Je≈õli zapytanie u≈ºytkownika jest niejasne lub niekompletne, zadawaj pytania uzupe≈ÇniajƒÖce, aby zebraƒá potrzebne informacje przed wywo≈Çaniem funkcji.
   - Przyk≈Çad: Je≈õli u≈ºytkownik pyta ‚ÄûO kt√≥rej otwieracie?‚Äù, ale nie wskazuje dnia, zapytaj: ‚ÄûO kt√≥ry dzie≈Ñ tygodnia chodzi?‚Äù

2. **Status zam√≥wienia**: 
   - Je≈õli u≈ºytkownik pyta o status zam√≥wienia, upewnij siƒô, ≈ºe posiadasz numer zam√≥wienia lub inne wystarczajƒÖce dane identyfikacyjne przed wykonaniem funkcji.

3. **Obs≈Çuga zapyta≈Ñ nietypowych**:
   - U≈ºywaj `do_nothing`, gdy pytanie u≈ºytkownika nie dotyczy bezpo≈õrednio wymienionych funkcji. W takich przypadkach podaj uprzejmƒÖ i zrozumia≈ÇƒÖ odpowied≈∫ w jƒôzyku naturalnym.

4. **Obs≈Çuga b≈Çƒôd√≥w**:
   - Je≈õli wykonanie funkcji nie jest mo≈ºliwe (np. brak danych lub nieobs≈Çugiwane zapytanie), odpowiedz w spos√≥b naturalny, wskazujƒÖc u≈ºytkownikowi dalsze kroki.

5. **Ton i jƒôzyk**:
   - Zawsze utrzymuj uprzejmy, pomocny i profesjonalny ton.

Upewnij siƒô, ≈ºe odpowied≈∫ w formacie JSON bezpo≈õrednio odzwierciedla funkcjƒô do wywo≈Çania i uzupe≈Çnia wszelkie potrzebne komunikaty wyja≈õniajƒÖce w trakcie interakcji.
"""


def chatbot():
    print("Witaj w restauracji Daniowo üçΩ, jestem asystentem Pomidor√≥wka üßë‚Äçü§ù‚Äçüßë. W czym mogƒô pomoƒá?")
    while True:
        user_input = input("Ty: ")

        if user_input.lower() == 'exit':
            print("Goodbye!")
            break

        print("Pomidor√≥wka: ")

        response = ollama.chat(
            model="llama3.1",
            stream=False,
            messages=[
                {"role": "system", "content": CHATBOT_SYSTEM_PROMPT},
                {"role": "user", "content": user_input}
            ],
            format="json",
        )
        bot_output = json.loads(response['message']['content'])

        function = bot_output['function']

        if function == 'get_opening_hours':
            get_opening_hours()

        elif function == 'get_menu':
            print_menu()

        elif function == 'place_order':
            place_order()

        elif function == 'get_order_status':
            get_order_status()

        elif function == 'do_nothing':
            do_nothing(user_input)

    print()


if __name__ == "__main__":
    chatbot()
